ARG EX_SERVICE=${EX_SERVICE}
ARG ALPINE_VERSION=3.11

FROM golang:1.13.10-alpine${ALPINE_VERSION} as builder
# This image provides binaries for Exchange microservices.
# A CI/CD service will distribute and build/deploy each microservice. TBD
# .

RUN apk update && \
    apk add --no-cache libmagic file-dev g++ make build-base \
	imagemagick-dev bash git upx

#ENV CGO_ENABLED=0 \
ENV GOOS=linux \
    GOARCH=amd64

WORKDIR /app

# Copy and download dependency using go mod
ADD go.mod go.sum ./
RUN go mod download

COPY . .

#RUN go build -mod=vendor -ldflags '-w' github.com/APTrust/exchange/apps/...
#RUN CGO_ENABLED=0 go build -ldflags '-w' github.com/APTrust/exchange/apps/...
#RUN go build -ldflags '-w' github.com/APTrust/exchange/apps/...
RUN make build-bin

# Compress binary
RUN upx /app/bin/* -1

FROM alpine:${ALPINE_VERSION}

ARG EX_SERVICE=${EX_SERVICE}
ARG ENVIRONMENT=${ENVIRONMENT:-development}

WORKDIR /app

VOLUME ["/app/data"]
VOLUME ["/app/config"]
# Note: Using main as app name because CMD doesn't support env expansion and
# Docker images are tagged with app names already.
COPY --from=builder /app//bin/${EX_SERVICE} /app/main
COPY --from=builder /app/bin/${EX_SERVICE} /app/${EX_SERVICE}

COPY --from=builder /app/config/${ENVIRONMENT}.json config/config.json
COPY --from=builder /app/config/aptrust_bag_validation_config.json config/aptrust_bag_validation_config.json

RUN apk update && \
    apk add --no-cache imagemagick-dev libmagic bash

RUN addgroup -S somegroup -g 1000 && adduser -S -G somegroup somebody -u 1000
RUN chown -R somebody:somegroup /app
USER somebody

#CMD ["/go/bin/main", "-config=/go/bin/config/config.json"]
CMD ["sh", "-c", "./${EX_SERVICE} -config=/go/bin/config/config.json"]
