ARG EX_SERVICE=${EX_SERVICE}
FROM golang:1.13.3-alpine3.10 as builder
# This image provides binaries for Exchange microservices.
# A CI/CD service will distribute and build/deploy each microservice. TBD
# .

RUN apk update && \
    apk add --no-cache libmagic file-dev g++ make build-base \
    imagemagick-dev bash git

ENV APP_PATH=/go/src/github.com/APTrust/exchange

RUN mkdir -p $APP_PATH
WORKDIR $APP_PATH

COPY . .
RUN go mod download
#RUN go get -v ...
RUN go install -a github.com/APTrust/exchange/apps/...

FROM alpine:latest

ARG EX_SERVICE=${EX_SERVICE}
ARG ENVIRONMENT=${ENVIRONMENT:-development}

WORKDIR /go/bin

VOLUME ["/go/bin/data"]
VOLUME ["/go/bin/config"]
# Note: Using main as app name because CMD doesn't support env expansion and
# Docker images are tagged with app names already.
COPY --from=builder /go/bin/${EX_SERVICE} /go/bin/main
COPY --from=builder /go/src/github.com/APTrust/exchange/config/${ENVIRONMENT}.json ${WORKDIR}/config/config.json
COPY --from=builder /go/src/github.com/APTrust/exchange/config/aptrust_bag_validation_config.json ${WORKDIR}/config/aptrust_bag_validation_config.json

# TODO: These libraries are needed for the exchange services if they were build
# statically linked. Need more testing. Current workaround is to install
# packages like below.
#    /usr/lib/x86_64-linux-gnu/libmagic.so.1 \
#    /lib/x86_64-linux-gnu/libpthread.so.0 \
#    /lib/x86_64-linux-gnu/libc.so.6 \
#    /lib/x86_64-linux-gnu/libz.so.1 \
#    /lib64/ld-linux-x86-64.so.2 /go/bin/

RUN apk update && \
    apk add --no-cache imagemagick-dev libmagic bash

CMD ["/go/bin/main", "-config=/go/bin/config/config.json"]
